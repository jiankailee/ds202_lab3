par(mfrow=c(2,2))
#4a
model=lm(Y~age+severe+anxiety,data=patient)
par(mfrow=c(2,2))
plot(model)
n
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(n,0,sd=sqrt(sigma()))
Y = beta_0 + beta_1*X + rnorm(n,0,sd=sqrt(sigma))
Y = beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
plot(X,Y)
#### Let the true regression line be E(Y) = 1 + 2X
beta_0 = 1
beta_1 = 2
## Input X
X = c(-2, 9, 0, 8, -5, 7, 3, -3, 5, 4, 2.3, -1.5, 3.5, 4.5, 7.7, -3.8, 5.8, 6.7, 0.4, 1.3, -4.2, 1.7, 7.2, -1, 1)
n = length(X)
Y = beta_0 + beta_1*X + rnorm(n,0,sd=sqrt(10)) ## generate random errors from normal distribution `rnorm`
plot(X,Y)
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y-X)
model_5= lm(Y~X)
summary(model_5)
model_5$residuals
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals)/(100-2)
sigma_hat_sq_5
sum(mode_5$residuals)
sum(model_5$residuals)
sigma_hat_sq_5 = sum(model_5$residuals^2)/(100-2)
sigma_hat_sq_5
plot(X,Y)
B = 5000
alpha = 0.05
signma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(100-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
signma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(100-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(100-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
hist(sigma_array)
abline(v=3,col="red",lwd=3,lty=2)
head(sigma_array)
abline(v=3,col="red",lwd=4,lty=2)
abline(v=4,col="red",lwd=3,lty=2)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
plot(X,Y)
n
n=dim(Auto)[1]
library(ISLR)
library(matlib)
head(Auto)
#1A Y: 392x1 X: Nx1 result 1x1
#response vector
head(Auto)
Y = Auto$mpg
n=dim(Auto)[1]
#design matrix
X = cbind(rep(1,n),Auto$horsepower) # first column needs to be column of 1's
XtX = t(X) %*%X
XtX
XtY = t(X) %*% Y
XtY
XtX_inv=inv(XtX)
XtX_inv
#1.c least square estimate
b = solve(XtX)%*%t(X)%*%Y
#1.d
Y = Auto$mpg
n=dim(Auto)[1]
X = cbind(rep(1,n),Auto$horsepower, Auto$displacement,Auto$weight) # first column needs to be column of 1's
XtX = t(X) %*%X
XtX
XtY = t(X) %*% Y
XtY
XtX_inv=inv(XtX)
XtX_inv
b = solve(XtX)%*%t(X)%*%Y
b
# 2a
# p = 4 number of variable
patient = read.table("/home/jk/Documents/ds301_hw2/patient.txt",header=FALSE)
names(patient) = c("satisf","age","severe","anxiety")
pairs(patient)
Y = patient$satisf
n = dim(patient)[1]
X = cbind(rep(1,n),patient$age, patient$severe, patient$anxiety) # first column needs to be column of 1's
XtX = t(X)%*%X
XtX
XtY = t(X) %*% Y
XtY
XtX_inv=inv(XtX)
XtX_inv
b = solve(XtX)%*%t(X)%*%Y
b
# calculate the fitted values and residuals
Yhat = X%*%b
e = Y - Yhat
sigma_hat = sqrt(sum(e^2)/(n-4))
sigma_hat
cov_matrix = solve(XtX)*sigma_hat^2
cov_matrix
std_error = cov_matrix/2
std_error
#2b
model=lm(Y~age+severe+anxiety,data=patient)
summary(model)
f_star = summary(model)$fstatistic[1]
f_star
#critical value (rejection region)
qf(1-0.05,summary(model)$fstatistic[2],summary(model)$fstatistic[3])
#p value
pf(F_star,summary(model)$fstatistic[2],summary(model)$fstatistic[3],lower.tail=FALSE)
#2c
# h0 : b1 = 0 h1: b1 != 0
# test statictis
ts = b[2]/sqrt(cov_matrix[2,2])
ts
#decision rules
# p value
2*pt(abs(ts),n-p,lower.tail=FALSE)
# rejection region
qt(1-alpha/2,n-p)
# 2d
sigma_hat_sq =sum(e^2)/(n-p)
#4a
model=lm(Y~age+severe+anxiety,data=patient)
par(mfrow=c(2,2))
plot(model)
#5
beta_0 = 2
n
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
plot(X,Y)
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(n,0,sd=sqrt(sigma))
plot(X,Y)
Y = beta_0 + beta_1*X + rnorm(n,0,sd=sqrt(sigma))
plot(X,Y)
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(n,0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y~X)
a <- summary(model_5)
a$sigma
amodel_5$residuals
a$sigma
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(len(X)-2)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
#4a
model=lm(Y~age+severe+anxiety,data=patient)
par(mfrow=c(2,2))
plot(model)
X
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y~X)
a <- summary(model_5)
a$sigma
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(len(X)-2)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
model_5= lm(Y~X)
a <- summary(model_5)
a$sigma
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(len(X)-2)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
library(ISLR)
library(matlib)
head(Auto)
#1A Y: 392x1 X: Nx1 result 1x1
#response vector
head(Auto)
Y = Auto$mpg
n=dim(Auto)[1]
#design matrix
X = cbind(rep(1,n),Auto$horsepower) # first column needs to be column of 1's
XtX = t(X) %*%X
XtX
XtY = t(X) %*% Y
XtY
XtX_inv=inv(XtX)
XtX_inv
#1.c least square estimate
b = solve(XtX)%*%t(X)%*%Y
#1.d
Y = Auto$mpg
n=dim(Auto)[1]
X = cbind(rep(1,n),Auto$horsepower, Auto$displacement,Auto$weight) # first column needs to be column of 1's
XtX = t(X) %*%X
XtX
XtY = t(X) %*% Y
XtY
XtX_inv=inv(XtX)
XtX_inv
b = solve(XtX)%*%t(X)%*%Y
b
# 2a
# p = 4 number of variable
patient = read.table("/home/jk/Documents/ds301_hw2/patient.txt",header=FALSE)
names(patient) = c("satisf","age","severe","anxiety")
pairs(patient)
Y = patient$satisf
n = dim(patient)[1]
X = cbind(rep(1,n),patient$age, patient$severe, patient$anxiety) # first column needs to be column of 1's
XtX = t(X)%*%X
XtX
XtY = t(X) %*% Y
XtY
XtX_inv=inv(XtX)
XtX_inv
b = solve(XtX)%*%t(X)%*%Y
b
# calculate the fitted values and residuals
Yhat = X%*%b
e = Y - Yhat
sigma_hat = sqrt(sum(e^2)/(n-4))
sigma_hat
cov_matrix = solve(XtX)*sigma_hat^2
cov_matrix
std_error = cov_matrix/2
std_error
#2b
model=lm(Y~age+severe+anxiety,data=patient)
summary(model)
f_star = summary(model)$fstatistic[1]
f_star
#critical value (rejection region)
qf(1-0.05,summary(model)$fstatistic[2],summary(model)$fstatistic[3])
#p value
pf(F_star,summary(model)$fstatistic[2],summary(model)$fstatistic[3],lower.tail=FALSE)
#2c
# h0 : b1 = 0 h1: b1 != 0
# test statictis
ts = b[2]/sqrt(cov_matrix[2,2])
ts
#decision rules
# p value
2*pt(abs(ts),n-p,lower.tail=FALSE)
# rejection region
qt(1-alpha/2,n-p)
# 2d
sigma_hat_sq =sum(e^2)/(n-p)
#4a
model=lm(Y~age+severe+anxiety,data=patient)
par(mfrow=c(2,2))
plot(model)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(n,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y~X)
a <- summary(model_5)
a$sigma
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(len(X)-2)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(X,0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y~X)
a <- summary(model_5)
a$sigma
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(len(X)-2)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
#4a
model=lm(Y~age+severe+anxiety,data=patient)
par(mfrow=c(2,2))
plot(model)
#2e
summary(model)
#2e
summary(model)$r.squared
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y~X)
a <- summary(model_5)
a$sigma
model_5$residuals
model_5= lm(Y~X)
a <- summary(model_5)
a$sigma
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(len(X)-2)
sigma_hat_sq_5
a$sigma^2
model_5= lm(Y~X)
a <- summary(model_5)
a
sigma_hat_sq_5 = sum(model_5$residuals^2)/(len(X)-2)
sigma_hat_sq_5 = sum(model_5$residuals^2)/(length(X)-2)
sigma_hat_sq_5
a$sigma^2
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y~X)
a <- summary(model_5)
a
a$sigma^2
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(length(X)-2)
a$sigma^2
a$sigma^2
#5
beta_0 = 2
beta_1 = 3
sigma = 2
X = seq(0,10,length.out = 100)
Y = beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
plot(X,Y)
model_5= lm(Y~X)
a <- summary(model_5)
a
a$sigma^2
model_5$residuals
sigma_hat_sq_5 = sum(model_5$residuals^2)/(length(X)-2)
B = 5000
alpha = 0.05
sigma_array = rep(0,B)
for (i in 1:B){
sim_y=beta_0 + beta_1*X + rnorm(length(X),0,sd=sqrt(sigma))
sim_model_5 = lm(sim_y~X)
sim_sigma_hat_sq_5 = sum(sim_model_5$residuals^2)/(len(X)-2)
sigma_array[i]=sim_sigma_hat_sq_5
}
head(sigma_array)
hist(sigma_array)
abline(v=4,col="red",lwd=3,lty=2)
a$sigma^2
knitr::opts_chunk$set(echo = TRUE)
#ggplot(tips,aes(s))+geom_bar(aes(fill=sex))
ggplot(tips,aes(day))+geom_bar(aes(fill=sex),position="dodge")
#ggplot(tips,aes(s))+geom_bar(aes(fill=sex))
tips$newday<-s
s<-factor(tips$day,levels = c("Thur","Fri","Sat","Sun"))
knitr::opts_chunk$set(echo = TRUE)
data(tips, package="reshape2")
numParty<-nrow(tips)
numParty
str(tips)
day<-factor(tips$day,levels = c("Thur","Fri","Sat","Sun"))
day
female5<-subset(tips,size>=5 &sex=="Female")
female5
library(ggplot2)
ggplot(tips,aes(x=tip,y=total_bill, color=total_bill))+geom_point()+xlab("Tip")+ylab("Total Bill")
tips$tiprate<-tips$tip/tips$total_bill*100
mean(tips$tiprate)
rev_time <- rev(levels(tips$time))
temp=factor(tips$time,levels = rev_time)
ggplot(tips,aes(x= temp, y =tiprate))+geom_boxplot()+xlab("Time")+ylab("Tip Rate")
#ggplot(tips,aes(x=total_bill,y=tip))+geom_point(aes(color=sex))
ggplot(tips,aes(x=total_bill,y=tip))+geom_point()+facet_grid(sex ~ smoker,labeller = label_both)
tips$newday
str(tips)
s<-factor(tips$day,levels = c("Thur","Fri","Sat","Sun"))
#ggplot(tips,aes(s))+geom_bar(aes(fill=sex))
tips$newday<-s
tips$newday
tips$day
setwd("~/Documents/ds202_lab3")
